(define
  (domain shakeys-world)
  (:requirements :strips)

  (:predicates
    (at ?object ?location)
    (in ?location ?room)
    (switch_on ?switch_location)
    (box ?box)
    (small_object ?object)
    (switch ?location)


  )

  ;;Move the robot from ?from to ?to
  (:action move
    :parameters (?robot ?from ?to ?room)

    ;;The locations need to be in the same room, the robot needs to be at ?from
    ;; and the robot needs to be a robot(not a box or small object)
    :precondition (and (in ?from ?room) (in ?to ?room) (at ?robot ?from)
                  (not(box ?robot)) (not(small_object ?robot)) (not(box ?to)))
    :effect (and (at ?robot ?to) (not(at ?robot ?from)))
  )


  (:action turn_lights_on
    :parameters (?robot ?location ?box)

    ;;The box needs to be at a switch and the robot on top of the box
    :precondition (and (not(switch_on ?location)) (at ?robot ?box)
                  (box ?box) (at ?box ?location) (switch ?location))
    :effect (switch_on ?location)
  )

  ;;Push a box between two locations
  (:action push
    :parameters (?robot ?box ?from ?to ?room)

    ;;The box and robot needs to be at the same location and you can only move
    ;; between locations in the same room
    :precondition (and (at ?box ?from) (at ?robot ?from) (box ?box)
                  (in ?from ?room) (in ?to ?room) (not(box ?robot))
                  (not(small_object ?robot)))
    :effect (and (at ?robot ?to) (not(at ?robot ?from)) (at ?box ?to)
            (not(at ?box ?from) ))
  )

  ;;The robot climbs up on a box
  (:action climb_up
    :parameters (?robot ?box ?location)

    :precondition (and (at ?robot ?location) (at ?box ?location) (not(box ?robot))
                 (not(small_object ?robot)) (box ?box))
    :effect (and (at ?robot ?box) (not(at ?robot ?location)))
  )

  ;;The robot climbs down from a box
  (:action climb_down
    :parameters (?robot ?box ?location)

    :precondition (and (at ?robot ?box) (at ?box ?location) (not(box ?robot))
                 (not(small_object ?robot)) (box ?box))
    :effect (and (at ?robot ?location) (not(at ?robot ?box)))
  )

  (:action grab_object
    :parameters (?robot ?object ?location ?switch_location ?room)

    :precondition (and (at ?robot ?location) (at ?object ?location)
                  (small_object ?object) (in ?location ?room)
                  (in ?switch_location ?room) (switch_on ?switch_location))

    :effect (and (at ?object ?robot) (not(at ?object ?location)))
  )

  (:action move_object
    :parameters (?robot ?object ?from ?to ?room)

    :precondition (and (at ?object ?robot) (at ?robot ?from) (small_object ?object)
                  (in ?from ?room) (in ?to ?room) (not(box ?robot)) (not(small_object ?robot)))
    :effect (and (at ?robot ?to) (not(at ?robot ?from)))
  )

  (:action drop_object
    :parameters (?robot ?object ?location)

    :precondition (and (at ?robot ?location) (at ?object ?robot)
                  (small_object ?object))

    :effect (and (at ?object ?location) (not(at ?object ?robot)))
  )









)
